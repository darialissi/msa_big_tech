// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/proto/messages.proto

package users

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProfileRequestMultiError, or nil if none found.
func (m *CreateProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Nickname

	// no validation rules for Bio

	// no validation rules for AvatarUrl

	if len(errors) > 0 {
		return CreateProfileRequestMultiError(errors)
	}

	return nil
}

// CreateProfileRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProfileRequestMultiError) AllErrors() []error { return m }

// CreateProfileRequestValidationError is the validation error returned by
// CreateProfileRequest.Validate if the designated constraints aren't met.
type CreateProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProfileRequestValidationError) ErrorName() string {
	return "CreateProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProfileRequestValidationError{}

// Validate checks the field values on CreateProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProfileResponseMultiError, or nil if none found.
func (m *CreateProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProfileResponseValidationError{
					field:  "UserProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProfileResponseValidationError{
					field:  "UserProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProfileResponseValidationError{
				field:  "UserProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProfileResponseMultiError(errors)
	}

	return nil
}

// CreateProfileResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProfileResponseMultiError) AllErrors() []error { return m }

// CreateProfileResponseValidationError is the validation error returned by
// CreateProfileResponse.Validate if the designated constraints aren't met.
type CreateProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProfileResponseValidationError) ErrorName() string {
	return "CreateProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProfileResponseValidationError{}

// Validate checks the field values on UpdateProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProfileRequestMultiError, or nil if none found.
func (m *UpdateProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Nickname

	// no validation rules for Bio

	// no validation rules for AvatarUrl

	if len(errors) > 0 {
		return UpdateProfileRequestMultiError(errors)
	}

	return nil
}

// UpdateProfileRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProfileRequestMultiError) AllErrors() []error { return m }

// UpdateProfileRequestValidationError is the validation error returned by
// UpdateProfileRequest.Validate if the designated constraints aren't met.
type UpdateProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProfileRequestValidationError) ErrorName() string {
	return "UpdateProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProfileRequestValidationError{}

// Validate checks the field values on UpdateProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProfileResponseMultiError, or nil if none found.
func (m *UpdateProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProfileResponseValidationError{
					field:  "UserProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProfileResponseValidationError{
					field:  "UserProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProfileResponseValidationError{
				field:  "UserProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProfileResponseMultiError(errors)
	}

	return nil
}

// UpdateProfileResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProfileResponseMultiError) AllErrors() []error { return m }

// UpdateProfileResponseValidationError is the validation error returned by
// UpdateProfileResponse.Validate if the designated constraints aren't met.
type UpdateProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProfileResponseValidationError) ErrorName() string {
	return "UpdateProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProfileResponseValidationError{}

// Validate checks the field values on GetProfileByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProfileByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProfileByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProfileByIDRequestMultiError, or nil if none found.
func (m *GetProfileByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProfileByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetProfileByIDRequestMultiError(errors)
	}

	return nil
}

// GetProfileByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetProfileByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProfileByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileByIDRequestMultiError) AllErrors() []error { return m }

// GetProfileByIDRequestValidationError is the validation error returned by
// GetProfileByIDRequest.Validate if the designated constraints aren't met.
type GetProfileByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileByIDRequestValidationError) ErrorName() string {
	return "GetProfileByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProfileByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileByIDRequestValidationError{}

// Validate checks the field values on GetProfileByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProfileByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProfileByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProfileByIDResponseMultiError, or nil if none found.
func (m *GetProfileByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProfileByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProfileByIDResponseValidationError{
					field:  "UserProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProfileByIDResponseValidationError{
					field:  "UserProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProfileByIDResponseValidationError{
				field:  "UserProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProfileByIDResponseMultiError(errors)
	}

	return nil
}

// GetProfileByIDResponseMultiError is an error wrapping multiple validation
// errors returned by GetProfileByIDResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProfileByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileByIDResponseMultiError) AllErrors() []error { return m }

// GetProfileByIDResponseValidationError is the validation error returned by
// GetProfileByIDResponse.Validate if the designated constraints aren't met.
type GetProfileByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileByIDResponseValidationError) ErrorName() string {
	return "GetProfileByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProfileByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileByIDResponseValidationError{}

// Validate checks the field values on GetProfileByNicknameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProfileByNicknameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProfileByNicknameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProfileByNicknameRequestMultiError, or nil if none found.
func (m *GetProfileByNicknameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProfileByNicknameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Nickname

	if len(errors) > 0 {
		return GetProfileByNicknameRequestMultiError(errors)
	}

	return nil
}

// GetProfileByNicknameRequestMultiError is an error wrapping multiple
// validation errors returned by GetProfileByNicknameRequest.ValidateAll() if
// the designated constraints aren't met.
type GetProfileByNicknameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileByNicknameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileByNicknameRequestMultiError) AllErrors() []error { return m }

// GetProfileByNicknameRequestValidationError is the validation error returned
// by GetProfileByNicknameRequest.Validate if the designated constraints
// aren't met.
type GetProfileByNicknameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileByNicknameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileByNicknameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileByNicknameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileByNicknameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileByNicknameRequestValidationError) ErrorName() string {
	return "GetProfileByNicknameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProfileByNicknameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileByNicknameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileByNicknameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileByNicknameRequestValidationError{}

// Validate checks the field values on GetProfileByNicknameResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProfileByNicknameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProfileByNicknameResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProfileByNicknameResponseMultiError, or nil if none found.
func (m *GetProfileByNicknameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProfileByNicknameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProfileByNicknameResponseValidationError{
					field:  "UserProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProfileByNicknameResponseValidationError{
					field:  "UserProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProfileByNicknameResponseValidationError{
				field:  "UserProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProfileByNicknameResponseMultiError(errors)
	}

	return nil
}

// GetProfileByNicknameResponseMultiError is an error wrapping multiple
// validation errors returned by GetProfileByNicknameResponse.ValidateAll() if
// the designated constraints aren't met.
type GetProfileByNicknameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileByNicknameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileByNicknameResponseMultiError) AllErrors() []error { return m }

// GetProfileByNicknameResponseValidationError is the validation error returned
// by GetProfileByNicknameResponse.Validate if the designated constraints
// aren't met.
type GetProfileByNicknameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileByNicknameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileByNicknameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileByNicknameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileByNicknameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileByNicknameResponseValidationError) ErrorName() string {
	return "GetProfileByNicknameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProfileByNicknameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileByNicknameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileByNicknameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileByNicknameResponseValidationError{}

// Validate checks the field values on SearchByNicknameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchByNicknameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchByNicknameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchByNicknameRequestMultiError, or nil if none found.
func (m *SearchByNicknameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchByNicknameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Query

	// no validation rules for Limit

	if len(errors) > 0 {
		return SearchByNicknameRequestMultiError(errors)
	}

	return nil
}

// SearchByNicknameRequestMultiError is an error wrapping multiple validation
// errors returned by SearchByNicknameRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchByNicknameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchByNicknameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchByNicknameRequestMultiError) AllErrors() []error { return m }

// SearchByNicknameRequestValidationError is the validation error returned by
// SearchByNicknameRequest.Validate if the designated constraints aren't met.
type SearchByNicknameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchByNicknameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchByNicknameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchByNicknameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchByNicknameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchByNicknameRequestValidationError) ErrorName() string {
	return "SearchByNicknameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchByNicknameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchByNicknameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchByNicknameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchByNicknameRequestValidationError{}

// Validate checks the field values on SearchByNicknameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchByNicknameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchByNicknameResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchByNicknameResponseMultiError, or nil if none found.
func (m *SearchByNicknameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchByNicknameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProfiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchByNicknameResponseValidationError{
						field:  fmt.Sprintf("Profiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchByNicknameResponseValidationError{
						field:  fmt.Sprintf("Profiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchByNicknameResponseValidationError{
					field:  fmt.Sprintf("Profiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchByNicknameResponseMultiError(errors)
	}

	return nil
}

// SearchByNicknameResponseMultiError is an error wrapping multiple validation
// errors returned by SearchByNicknameResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchByNicknameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchByNicknameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchByNicknameResponseMultiError) AllErrors() []error { return m }

// SearchByNicknameResponseValidationError is the validation error returned by
// SearchByNicknameResponse.Validate if the designated constraints aren't met.
type SearchByNicknameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchByNicknameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchByNicknameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchByNicknameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchByNicknameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchByNicknameResponseValidationError) ErrorName() string {
	return "SearchByNicknameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchByNicknameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchByNicknameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchByNicknameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchByNicknameResponseValidationError{}

// Validate checks the field values on UserProfile with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserProfile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserProfile with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserProfileMultiError, or
// nil if none found.
func (m *UserProfile) ValidateAll() error {
	return m.validate(true)
}

func (m *UserProfile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Nickname

	if len(errors) > 0 {
		return UserProfileMultiError(errors)
	}

	return nil
}

// UserProfileMultiError is an error wrapping multiple validation errors
// returned by UserProfile.ValidateAll() if the designated constraints aren't met.
type UserProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserProfileMultiError) AllErrors() []error { return m }

// UserProfileValidationError is the validation error returned by
// UserProfile.Validate if the designated constraints aren't met.
type UserProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProfileValidationError) ErrorName() string { return "UserProfileValidationError" }

// Error satisfies the builtin error interface
func (e UserProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProfileValidationError{}
