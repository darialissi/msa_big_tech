// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/darialissi/msa_big_tech/social/internal/app/models"
	mock "github.com/stretchr/testify/mock"
)

// OutboxRepository is an autogenerated mock type for the OutboxRepository type
type OutboxRepository struct {
	mock.Mock
}

type OutboxRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OutboxRepository) EXPECT() *OutboxRepository_Expecter {
	return &OutboxRepository_Expecter{mock: &_m.Mock}
}

// SaveFriendRequestCreatedID provides a mock function with given fields: ctx, id
func (_m *OutboxRepository) SaveFriendRequestCreatedID(ctx context.Context, id models.FriendRequestID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SaveFriendRequestCreatedID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.FriendRequestID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OutboxRepository_SaveFriendRequestCreatedID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveFriendRequestCreatedID'
type OutboxRepository_SaveFriendRequestCreatedID_Call struct {
	*mock.Call
}

// SaveFriendRequestCreatedID is a helper method to define mock.On call
//   - ctx context.Context
//   - id models.FriendRequestID
func (_e *OutboxRepository_Expecter) SaveFriendRequestCreatedID(ctx interface{}, id interface{}) *OutboxRepository_SaveFriendRequestCreatedID_Call {
	return &OutboxRepository_SaveFriendRequestCreatedID_Call{Call: _e.mock.On("SaveFriendRequestCreatedID", ctx, id)}
}

func (_c *OutboxRepository_SaveFriendRequestCreatedID_Call) Run(run func(ctx context.Context, id models.FriendRequestID)) *OutboxRepository_SaveFriendRequestCreatedID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.FriendRequestID))
	})
	return _c
}

func (_c *OutboxRepository_SaveFriendRequestCreatedID_Call) Return(_a0 error) *OutboxRepository_SaveFriendRequestCreatedID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OutboxRepository_SaveFriendRequestCreatedID_Call) RunAndReturn(run func(context.Context, models.FriendRequestID) error) *OutboxRepository_SaveFriendRequestCreatedID_Call {
	_c.Call.Return(run)
	return _c
}

// SaveFriendRequestUpdatedID provides a mock function with given fields: ctx, id
func (_m *OutboxRepository) SaveFriendRequestUpdatedID(ctx context.Context, id models.FriendRequestID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SaveFriendRequestUpdatedID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.FriendRequestID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OutboxRepository_SaveFriendRequestUpdatedID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveFriendRequestUpdatedID'
type OutboxRepository_SaveFriendRequestUpdatedID_Call struct {
	*mock.Call
}

// SaveFriendRequestUpdatedID is a helper method to define mock.On call
//   - ctx context.Context
//   - id models.FriendRequestID
func (_e *OutboxRepository_Expecter) SaveFriendRequestUpdatedID(ctx interface{}, id interface{}) *OutboxRepository_SaveFriendRequestUpdatedID_Call {
	return &OutboxRepository_SaveFriendRequestUpdatedID_Call{Call: _e.mock.On("SaveFriendRequestUpdatedID", ctx, id)}
}

func (_c *OutboxRepository_SaveFriendRequestUpdatedID_Call) Run(run func(ctx context.Context, id models.FriendRequestID)) *OutboxRepository_SaveFriendRequestUpdatedID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.FriendRequestID))
	})
	return _c
}

func (_c *OutboxRepository_SaveFriendRequestUpdatedID_Call) Return(_a0 error) *OutboxRepository_SaveFriendRequestUpdatedID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OutboxRepository_SaveFriendRequestUpdatedID_Call) RunAndReturn(run func(context.Context, models.FriendRequestID) error) *OutboxRepository_SaveFriendRequestUpdatedID_Call {
	_c.Call.Return(run)
	return _c
}

// NewOutboxRepository creates a new instance of OutboxRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOutboxRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OutboxRepository {
	mock := &OutboxRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
