// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/darialissi/msa_big_tech/social/internal/app/usecases/dto"
	mock "github.com/stretchr/testify/mock"

	models "github.com/darialissi/msa_big_tech/social/internal/app/models"
)

// FriendRepository is an autogenerated mock type for the FriendRepository type
type FriendRepository struct {
	mock.Mock
}

type FriendRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FriendRepository) EXPECT() *FriendRepository_Expecter {
	return &FriendRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, fr
func (_m *FriendRepository) Delete(ctx context.Context, fr *dto.RemoveFriend) (*models.UserFriend, error) {
	ret := _m.Called(ctx, fr)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *models.UserFriend
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RemoveFriend) (*models.UserFriend, error)); ok {
		return rf(ctx, fr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RemoveFriend) *models.UserFriend); ok {
		r0 = rf(ctx, fr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserFriend)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.RemoveFriend) error); ok {
		r1 = rf(ctx, fr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FriendRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type FriendRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - fr *dto.RemoveFriend
func (_e *FriendRepository_Expecter) Delete(ctx interface{}, fr interface{}) *FriendRepository_Delete_Call {
	return &FriendRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, fr)}
}

func (_c *FriendRepository_Delete_Call) Run(run func(ctx context.Context, fr *dto.RemoveFriend)) *FriendRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.RemoveFriend))
	})
	return _c
}

func (_c *FriendRepository_Delete_Call) Return(_a0 *models.UserFriend, _a1 error) *FriendRepository_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FriendRepository_Delete_Call) RunAndReturn(run func(context.Context, *dto.RemoveFriend) (*models.UserFriend, error)) *FriendRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FetchManyByUserId provides a mock function with given fields: ctx, userId
func (_m *FriendRepository) FetchManyByUserId(ctx context.Context, userId dto.UserID) ([]*models.UserFriend, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for FetchManyByUserId")
	}

	var r0 []*models.UserFriend
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserID) ([]*models.UserFriend, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserID) []*models.UserFriend); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.UserFriend)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.UserID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FriendRepository_FetchManyByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchManyByUserId'
type FriendRepository_FetchManyByUserId_Call struct {
	*mock.Call
}

// FetchManyByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - userId dto.UserID
func (_e *FriendRepository_Expecter) FetchManyByUserId(ctx interface{}, userId interface{}) *FriendRepository_FetchManyByUserId_Call {
	return &FriendRepository_FetchManyByUserId_Call{Call: _e.mock.On("FetchManyByUserId", ctx, userId)}
}

func (_c *FriendRepository_FetchManyByUserId_Call) Run(run func(ctx context.Context, userId dto.UserID)) *FriendRepository_FetchManyByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.UserID))
	})
	return _c
}

func (_c *FriendRepository_FetchManyByUserId_Call) Return(_a0 []*models.UserFriend, _a1 error) *FriendRepository_FetchManyByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FriendRepository_FetchManyByUserId_Call) RunAndReturn(run func(context.Context, dto.UserID) ([]*models.UserFriend, error)) *FriendRepository_FetchManyByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, fr
func (_m *FriendRepository) Save(ctx context.Context, fr *dto.SaveFriend) (*models.UserFriend, error) {
	ret := _m.Called(ctx, fr)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *models.UserFriend
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SaveFriend) (*models.UserFriend, error)); ok {
		return rf(ctx, fr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SaveFriend) *models.UserFriend); ok {
		r0 = rf(ctx, fr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserFriend)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.SaveFriend) error); ok {
		r1 = rf(ctx, fr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FriendRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type FriendRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - fr *dto.SaveFriend
func (_e *FriendRepository_Expecter) Save(ctx interface{}, fr interface{}) *FriendRepository_Save_Call {
	return &FriendRepository_Save_Call{Call: _e.mock.On("Save", ctx, fr)}
}

func (_c *FriendRepository_Save_Call) Run(run func(ctx context.Context, fr *dto.SaveFriend)) *FriendRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.SaveFriend))
	})
	return _c
}

func (_c *FriendRepository_Save_Call) Return(_a0 *models.UserFriend, _a1 error) *FriendRepository_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FriendRepository_Save_Call) RunAndReturn(run func(context.Context, *dto.SaveFriend) (*models.UserFriend, error)) *FriendRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewFriendRepository creates a new instance of FriendRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFriendRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FriendRepository {
	mock := &FriendRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
