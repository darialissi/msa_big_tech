// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/darialissi/msa_big_tech/social/internal/app/usecases/dto"
	mock "github.com/stretchr/testify/mock"

	models "github.com/darialissi/msa_big_tech/social/internal/app/models"
)

// FriendRequestRepository is an autogenerated mock type for the FriendRequestRepository type
type FriendRequestRepository struct {
	mock.Mock
}

type FriendRequestRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FriendRequestRepository) EXPECT() *FriendRequestRepository_Expecter {
	return &FriendRequestRepository_Expecter{mock: &_m.Mock}
}

// FetchById provides a mock function with given fields: ctx, reqId
func (_m *FriendRequestRepository) FetchById(ctx context.Context, reqId dto.FriendRequestID) (*models.FriendRequest, error) {
	ret := _m.Called(ctx, reqId)

	if len(ret) == 0 {
		panic("no return value specified for FetchById")
	}

	var r0 *models.FriendRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.FriendRequestID) (*models.FriendRequest, error)); ok {
		return rf(ctx, reqId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.FriendRequestID) *models.FriendRequest); ok {
		r0 = rf(ctx, reqId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FriendRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.FriendRequestID) error); ok {
		r1 = rf(ctx, reqId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FriendRequestRepository_FetchById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchById'
type FriendRequestRepository_FetchById_Call struct {
	*mock.Call
}

// FetchById is a helper method to define mock.On call
//   - ctx context.Context
//   - reqId dto.FriendRequestID
func (_e *FriendRequestRepository_Expecter) FetchById(ctx interface{}, reqId interface{}) *FriendRequestRepository_FetchById_Call {
	return &FriendRequestRepository_FetchById_Call{Call: _e.mock.On("FetchById", ctx, reqId)}
}

func (_c *FriendRequestRepository_FetchById_Call) Run(run func(ctx context.Context, reqId dto.FriendRequestID)) *FriendRequestRepository_FetchById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.FriendRequestID))
	})
	return _c
}

func (_c *FriendRequestRepository_FetchById_Call) Return(_a0 *models.FriendRequest, _a1 error) *FriendRequestRepository_FetchById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FriendRequestRepository_FetchById_Call) RunAndReturn(run func(context.Context, dto.FriendRequestID) (*models.FriendRequest, error)) *FriendRequestRepository_FetchById_Call {
	_c.Call.Return(run)
	return _c
}

// FetchManyByUserId provides a mock function with given fields: ctx, userId
func (_m *FriendRequestRepository) FetchManyByUserId(ctx context.Context, userId dto.UserID) ([]*models.FriendRequest, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for FetchManyByUserId")
	}

	var r0 []*models.FriendRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserID) ([]*models.FriendRequest, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserID) []*models.FriendRequest); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.FriendRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.UserID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FriendRequestRepository_FetchManyByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchManyByUserId'
type FriendRequestRepository_FetchManyByUserId_Call struct {
	*mock.Call
}

// FetchManyByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - userId dto.UserID
func (_e *FriendRequestRepository_Expecter) FetchManyByUserId(ctx interface{}, userId interface{}) *FriendRequestRepository_FetchManyByUserId_Call {
	return &FriendRequestRepository_FetchManyByUserId_Call{Call: _e.mock.On("FetchManyByUserId", ctx, userId)}
}

func (_c *FriendRequestRepository_FetchManyByUserId_Call) Run(run func(ctx context.Context, userId dto.UserID)) *FriendRequestRepository_FetchManyByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.UserID))
	})
	return _c
}

func (_c *FriendRequestRepository_FetchManyByUserId_Call) Return(_a0 []*models.FriendRequest, _a1 error) *FriendRequestRepository_FetchManyByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FriendRequestRepository_FetchManyByUserId_Call) RunAndReturn(run func(context.Context, dto.UserID) ([]*models.FriendRequest, error)) *FriendRequestRepository_FetchManyByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, req
func (_m *FriendRequestRepository) Save(ctx context.Context, req *dto.SaveFriendRequest) (*models.FriendRequest, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *models.FriendRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SaveFriendRequest) (*models.FriendRequest, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SaveFriendRequest) *models.FriendRequest); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FriendRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.SaveFriendRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FriendRequestRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type FriendRequestRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.SaveFriendRequest
func (_e *FriendRequestRepository_Expecter) Save(ctx interface{}, req interface{}) *FriendRequestRepository_Save_Call {
	return &FriendRequestRepository_Save_Call{Call: _e.mock.On("Save", ctx, req)}
}

func (_c *FriendRequestRepository_Save_Call) Run(run func(ctx context.Context, req *dto.SaveFriendRequest)) *FriendRequestRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.SaveFriendRequest))
	})
	return _c
}

func (_c *FriendRequestRepository_Save_Call) Return(_a0 *models.FriendRequest, _a1 error) *FriendRequestRepository_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FriendRequestRepository_Save_Call) RunAndReturn(run func(context.Context, *dto.SaveFriendRequest) (*models.FriendRequest, error)) *FriendRequestRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: ctx, req
func (_m *FriendRequestRepository) UpdateStatus(ctx context.Context, req *dto.UpdateFriendRequest) (*models.FriendRequest, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 *models.FriendRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UpdateFriendRequest) (*models.FriendRequest, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UpdateFriendRequest) *models.FriendRequest); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FriendRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.UpdateFriendRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FriendRequestRepository_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type FriendRequestRepository_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.UpdateFriendRequest
func (_e *FriendRequestRepository_Expecter) UpdateStatus(ctx interface{}, req interface{}) *FriendRequestRepository_UpdateStatus_Call {
	return &FriendRequestRepository_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, req)}
}

func (_c *FriendRequestRepository_UpdateStatus_Call) Run(run func(ctx context.Context, req *dto.UpdateFriendRequest)) *FriendRequestRepository_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.UpdateFriendRequest))
	})
	return _c
}

func (_c *FriendRequestRepository_UpdateStatus_Call) Return(_a0 *models.FriendRequest, _a1 error) *FriendRequestRepository_UpdateStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FriendRequestRepository_UpdateStatus_Call) RunAndReturn(run func(context.Context, *dto.UpdateFriendRequest) (*models.FriendRequest, error)) *FriendRequestRepository_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewFriendRequestRepository creates a new instance of FriendRequestRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFriendRequestRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FriendRequestRepository {
	mock := &FriendRequestRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
